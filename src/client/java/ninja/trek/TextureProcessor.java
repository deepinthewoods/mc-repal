package ninja.trek;

import net.minecraft.client.MinecraftClient;
import net.minecraft.resource.ResourceManager;
import net.minecraft.util.Identifier;
import net.fabricmc.loader.api.FabricLoader;
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.List;
import java.util.regex.Pattern;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;

public class TextureProcessor {
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
    private static final Pattern BLOCK_TEXTURE_PATTERN = Pattern.compile("textures/block/.*\\.png");

    private static final String[] COMMON_SUFFIXES = {
            "_top", "_bottom", "_side", "_front", "_back",
            "_base", "_overlay", "_particle", "_layer_1", "_layer_2",
            "", "_all", "_planks", "_log", "_stem",
            "_leaves", "_door_top", "_door_bottom"
    };

    public static void processAllTextures() {
        try {
            ResourceManager resourceManager = MinecraftClient.getInstance().getResourceManager();
            Path outputDir = FabricLoader.getInstance().getGameDir()
                    .resolve("resourcepacks")
                    .resolve(Repal.getPackName());

            // Create resource pack directory structure
            Files.createDirectories(outputDir.resolve("assets/minecraft/textures/block"));

            // Create pack.mcmeta
            createPackMcmeta(outputDir);

            // Process textures by layer
            LayerManager layerManager = LayerManager.getInstance();
            List<LayerInfo> layers = layerManager.getAllLayers();

            // Save layer configuration for reference
            saveLayerConfig(outputDir, layers);

            // Process each layer
            for (LayerInfo layer : layers) {
                processLayer(layer, resourceManager, outputDir);
            }

            // Process unassigned textures with default settings
            processUnassignedTextures(resourceManager, outputDir);

            Repal.LOGGER.info("Resource pack generation complete: {}", outputDir);
        } catch (Exception e) {
            Repal.LOGGER.error("Failed to process textures", e);
        }
    }

    private static void createPackMcmeta(Path outputDir) throws IOException {
        JsonObject pack = new JsonObject();
        pack.addProperty("pack_format", 15); // Minecraft 1.21 pack format
        pack.addProperty("description", "Generated by Repal - " + Repal.getPackName());
        JsonObject root = new JsonObject();
        root.add("pack", pack);
        Files.write(
                outputDir.resolve("pack.mcmeta"),
                GSON.toJson(root).getBytes()
        );
    }

    private static void saveLayerConfig(Path outputDir, List<LayerInfo> layers) throws IOException {
        Path configDir = outputDir.resolve("repal_data");
        Files.createDirectories(configDir);

        JsonObject config = new JsonObject();
        for (LayerInfo layer : layers) {
            JsonObject layerConfig = new JsonObject();
            layerConfig.addProperty("name", layer.getName());
            layerConfig.addProperty("contrast", layer.getContrast());
            layerConfig.addProperty("saturation", layer.getSaturation());
            layerConfig.addProperty("palette", layer.getPalette());
            config.add(layer.getId().toString(), layerConfig);
        }

        Files.write(
                configDir.resolve("layers.json"),
                GSON.toJson(config).getBytes()
        );
    }

    private static void processLayer(LayerInfo layer, ResourceManager resourceManager, Path outputDir) {
        try {
            Repal.LOGGER.info("Processing layer '{}' with {} textures",
                    layer.getName(), layer.getTextures().size());

            Map<String, List<Identifier>> groups = groupTextures(layer.getTextures());
            List<Color> palette = RepalResourceReloadListener.getLayerPaletteColors(layer);

            // Process each texture group within the layer
            for (Map.Entry<String, List<Identifier>> entry : groups.entrySet()) {
                processTextureGroup(
                        entry.getKey(),
                        entry.getValue(),
                        resourceManager,
                        outputDir,
                        layer,
                        palette
                );
            }

            Repal.LOGGER.info("Layer '{}' processing complete", layer.getName());
        } catch (Exception e) {
            Repal.LOGGER.error("Failed to process layer '{}'", layer.getName(), e);
        }
    }

    private static void processUnassignedTextures(ResourceManager resourceManager, Path outputDir) {
        List<Identifier> unassigned = TextureManager.getUnassignedTextures();
        if (unassigned.isEmpty()) {
            return;
        }

        Repal.LOGGER.info("Processing {} unassigned textures with default settings", unassigned.size());
        Map<String, List<Identifier>> groups = groupTextures(unassigned);

        // Create a temporary layer with default settings
        LayerInfo defaultLayer = new LayerInfo("Default");
        List<Color> defaultPalette = RepalResourceReloadListener.getLayerPaletteColors(defaultLayer);

        // Process each group
        for (Map.Entry<String, List<Identifier>> entry : groups.entrySet()) {
            processTextureGroup(
                    entry.getKey(),
                    entry.getValue(),
                    resourceManager,
                    outputDir,
                    defaultLayer,
                    defaultPalette
            );
        }
    }

    private static Map<String, List<Identifier>> groupTextures(Collection<Identifier> textures) {
        Map<String, List<Identifier>> groups = new HashMap<>();
        // Initialize groups for all suffixes
        for (String suffix : COMMON_SUFFIXES) {
            groups.put(suffix, new ArrayList<>());
        }

        // Group textures by suffix
        for (Identifier identifier : textures) {
            String path = identifier.getPath();
            String filename = path.substring(path.lastIndexOf('/') + 1, path.lastIndexOf('.'));
            String matchedSuffix = findMatchingSuffix(filename);
            groups.get(matchedSuffix).add(identifier);
        }

        // Remove empty groups
        groups.entrySet().removeIf(entry -> entry.getValue().isEmpty());
        return groups;
    }

    private static String findMatchingSuffix(String filename) {
        for (String suffix : COMMON_SUFFIXES) {
            if (filename.endsWith(suffix)) {
                return suffix;
            }
        }
        return ""; // Default group for no suffix match
    }

    private static void processTextureGroup(
            String suffix,
            List<Identifier> textures,
            ResourceManager resourceManager,
            Path outputDir,
            LayerInfo layer,
            List<Color> palette
    ) {
        try {
            Repal.LOGGER.info("Processing texture group '{}' in layer '{}' with {} textures",
                    suffix.isEmpty() ? "default" : suffix, layer.getName(), textures.size());

            for (Identifier id : textures) {
                try (InputStream stream = resourceManager.getResource(id).get().getInputStream()) {
                    BufferedImage image = ImageIO.read(stream);
                    BufferedImage processed = ImageProcessor.processImage(
                            image,
                            palette,
                            layer.getContrast(),
                            layer.getSaturation()
                    );

                    // Save processed texture
                    String relativePath = id.getPath().substring("textures/".length());
                    Path outputPath = outputDir.resolve("assets/minecraft/textures").resolve(relativePath);
                    Files.createDirectories(outputPath.getParent());
                    ImageIO.write(processed, "png", outputPath.toFile());
                } catch (Exception e) {
                    Repal.LOGGER.error("Failed to process texture {} in layer {}", id, layer.getName(), e);
                }
            }
        } catch (Exception e) {
            Repal.LOGGER.error("Failed to process texture group '{}' in layer '{}'",
                    suffix, layer.getName(), e);
        }
    }
}